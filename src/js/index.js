// Generated by CoffeeScript 1.3.1
(function() {
  ﻿;

  var CClear, CReset, CTextReplace, CustomTextPlus, FormCCClear, FormRegClear, Pagination, ShowTable, custom_area, default_custom_text, jsondata, pager, pagination_count, root, view_count;

  view_count = 150;

  pagination_count = 5;

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  $.fn.state = function(state) {
    var d;
    d = 'disabled';
    return this.each(function() {
      var $this;
      $this = $(this);
      $this.html($this.data()[state]);
      if (state === "loading") {
        return $this.addClass(d).attr(d, d);
      } else {
        return $this.removeClass(d).removeAttr(d);
      }
    });
  };

  pager = NaN;

  jsondata = [];

  $.fn.UpdateTable = function(data) {
    var $this;
    $("#load_circle").css('display', 'inline');
    $this = $(this);
    $this.state('loading');
    return $.getJSON('/json', data, function(json) {
      var params;
      jsondata = json;
      ShowTable(0, view_count);
      params = {
        view_record: view_count,
        total_record: json.length,
        nav_count: pagination_count
      };
      pager = $("#view_pages").pagination(params);
      $this.state('complete');
      return $("#load_circle").css('display', 'none');
    });
  };

  root.GetViewTable = function(point) {
    ShowTable((point - 1) * view_count, point * view_count);
    return pager.MakeNavigator(point);
  };

  ShowTable = function(first, last) {
    var i, j, str, _i;
    str = "";
    j = 0;
    for (i = _i = first; first <= last ? _i < last : _i > last; i = first <= last ? ++_i : --_i) {
      if (jsondata[i] != null) {
        str += "<tr>";
        str += "<td>" + escape(jsondata[i].registry) + "</td>";
        str += "<td>" + escape(jsondata[i].country) + "</td>";
        str += "<td>" + escape(jsondata[i].StartIP) + "</td>";
        str += "<td>" + escape(jsondata[i].EndIP) + "</td>";
        str += "</tr>";
      }
    }
    return $("#viewbar tbody").html(str);
  };

  $.fn.pagination = function(options) {
    options.elements = options.elements != null ? options.elements : $(this);
    return new Pagination(options);
  };

  $.fn.pagination.defaults = {
    current_page: 1,
    view_record: 10,
    total_record: 0,
    nav_count: 5
  };

  Pagination = function(options) {
    var opts;
    opts = $.extend({}, $.fn.pagination.defaults, options);
    this.current_page = opts.current_page;
    this.view_record = opts.view_record;
    this.total_record = opts.total_record;
    this.total_page = Math.ceil(this.total_record / this.view_record);
    this.nav_count = opts.nav_count;
    this.elements = opts.elements;
    this.Initialized();
    return this;
  };

  Pagination.prototype = {
    Initialized: function() {
      if (this.total_page < this.nav_count) {
        this.nav_count = this.total_page;
      }
      if (this.total_page <= 1 || this.total_page < this.current_page) {
        this.elements.empty();
        return this.elements.css('display', 'none');
      } else {
        this.MakeNavigator(this.current_page);
        return this.elements.css('display', 'block');
      }
    },
    MakeNavigator: function(current) {
      var first, i, last, nav_count_half, outstr, _i;
      this.elements.empty();
      nav_count_half = Math.floor(this.nav_count / 2);
      first = current - nav_count_half;
      last = current + nav_count_half;
      if (first <= 0) {
        first = 1;
        last = this.nav_count;
      }
      if (last > this.total_page) {
        first = this.total_page - this.nav_count + 1;
        last = this.total_page;
      }
      outstr = '<ul>';
      if (current > 2) {
        outstr += '<li class="first">';
      } else {
        outstr += '<li class="first active">';
      }
      outstr += '<a href="#" onclick="GetViewTable(1)">&laquo;</a></li>';
      if (current > 1) {
        outstr += '<li class="prev">';
      } else {
        outstr += '<li class="prev active">';
      }
      outstr += '<a href="#" onclick="GetViewTable(' + (current - 1) + ')">&lsaquo;</a></li>';
      for (i = _i = first; first <= last ? _i <= last : _i >= last; i = first <= last ? ++_i : --_i) {
        if (i === current) {
          outstr += '<li class="page active">';
        } else {
          outstr += '<li class="page">';
        }
        outstr += '<a href="#" onclick="GetViewTable(' + i + ')">' + i + '</a></li>';
      }
      if (current < this.total_page) {
        outstr += '<li class="next">';
      } else {
        outstr += '<li class="next active">';
      }
      outstr += '<a href="#" onclick="GetViewTable(' + (current + 1) + ')">&rsaquo;</a></li>';
      if (current < this.total_page - 1) {
        outstr += '<li class="last">';
      } else {
        outstr += '<li class="last active">';
      }
      outstr += '<a href="#" onclick="GetViewTable(' + this.total_page + ')">&raquo;</a></li>';
      outstr += '</ul>';
      return this.elements.append(outstr);
    }
  };

  $('#registry .save').click(function() {
    var checks, num;
    checks = (function() {
      var _i, _len, _ref, _results;
      _ref = $('#registry .rir:checked');
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        num = _ref[_i];
        _results.push(num.value);
      }
      return _results;
    })();
    $(this).UpdateTable({
      'registry': checks.join(',')
    });
    return FormCCClear.click();
  });

  $('#country .save').click(function() {
    var checks, num;
    checks = (function() {
      var _i, _len, _ref, _results;
      _ref = $('#country .cc:checked');
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        num = _ref[_i];
        _results.push(num.value);
      }
      return _results;
    })();
    $(this).UpdateTable({
      'country': checks.join(',')
    });
    return FormRegClear.click();
  });

  $('#registry .rir').click(function() {
    if ($('#registry_all').attr('checked')) {
      return $('#registry_all').removeAttr('checked');
    }
  });

  $('#country .cc').click(function() {
    if ($('#country_all').attr('checked')) {
      return $('#country_all').removeAttr('checked');
    }
  });

  $('#registry .all').click(function() {
    if (this.checked) {
      return $('#registry input').attr('checked', 'checked');
    } else {
      return $('#registry input').removeAttr('checked');
    }
  });

  $('#country .all').click(function() {
    if (this.checked) {
      return $('#country input').attr('checked', 'checked');
    } else {
      return $('#country input').removeAttr('checked');
    }
  });

  FormRegClear = $('#registry .clear').click(function() {
    return $('#registry input').removeAttr('checked');
  });

  FormCCClear = $('#country .clear').click(function() {
    return $('#country input').removeAttr('checked');
  });

  custom_area = $('#custom input');

  default_custom_text = "<CC>: <IPSTART>-<IPEND>";

  CustomTextPlus = function(value) {
    var setting_text;
    setting_text = custom_area.attr('value');
    setting_text += value;
    return custom_area.attr('value', setting_text);
  };

  $('#custom .set_registry').click(function() {
    CustomTextPlus("<REGISTRY>");
    return CTextReplace.keyup();
  });

  $('#custom .set_country').click(function() {
    CustomTextPlus("<CC>");
    return CTextReplace.keyup();
  });

  $('#custom .set_ipstart').click(function() {
    CustomTextPlus("<IPSTART>");
    return CTextReplace.keyup();
  });

  $('#custom .set_ipend').click(function() {
    CustomTextPlus("<IPEND>");
    return CTextReplace.keyup();
  });

  CReset = $('#custom .reset').click(function() {
    CClear.click();
    CustomTextPlus(default_custom_text);
    return CTextReplace.keyup();
  });

  CClear = $('#custom .clear').click(function() {
    custom_area.attr('value', '');
    return CTextReplace.keyup();
  });

  CTextReplace = custom_area.keyup(function() {
    var str, value;
    value = $(this).attr('value');
    str = $.trim(value);
    str = str.replace(/<REGISTRY>/g, "APNIC");
    str = str.replace(/<CC>/g, "JP");
    str = str.replace(/<IPSTART>/g, "192.168.0.0");
    str = str.replace(/<IPEND>/g, "192.168.0.255");
    return $("#custom .result").text(str);
  });

  $("#custom .output").click(function() {
    var custom_text, custom_value, json, output, str, _i, _len;
    if (jsondata.length > 0) {
      custom_value = custom_area.attr('value');
      custom_text = $.trim(custom_value);
      output = "";
      for (_i = 0, _len = jsondata.length; _i < _len; _i++) {
        json = jsondata[_i];
        str = custom_text.replace(/<REGISTRY>/g, json.registry);
        str = str.replace(/<CC>/g, json.country);
        str = str.replace(/<IPSTART>/g, json.StartIP);
        str = str.replace(/<IPEND>/g, json.EndIP);
        output += str + '<br>';
      }
      return $("body").html(output);
    } else {
      return alert("データが取得されていません。");
    }
  });

  $("#custom .download").click(function() {
    var country_checks, custom_text, custom_value, list, num, output, registry_checks;
    registry_checks = (function() {
      var _i, _len, _ref, _results;
      _ref = $('#registry .rir:checked');
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        num = _ref[_i];
        _results.push(num.value);
      }
      return _results;
    })();
    country_checks = (function() {
      var _i, _len, _ref, _results;
      _ref = $('#country .cc:checked');
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        num = _ref[_i];
        _results.push(num.value);
      }
      return _results;
    })();
    if (registry_checks.length > 0 && country_checks.length > 0) {
      return alert("レジストリ側、国名側の両方のチェックボックスにチェックが入っています。\n" + "どちらか片方のチェックボックスをクリアして、再度行ってください。");
    } else if (registry_checks.length === 0 && country_checks.length === 0) {
      return alert("レジストリ側、国名側の両方のチェックボックスにチェックが入っていません。\n" + "どちらか片方の取得したいチェックボックスを選択して、再度行ってください。");
    } else {
      custom_value = custom_area.attr('value');
      custom_text = $.trim(custom_value);
      if (registry_checks.length > 0) {
        list = registry_checks.join(',');
        output = "?registry=" + list;
      } else {
        list = country_checks.join(',');
        output = "?country=" + list;
      }
      return location.href = encodeURI("/jsoncustom" + output + "&settings=" + custom_text);
    }
  });

  $("#custom").ready(function() {
    return CReset.click();
  });

  $(document).ready(function() {
    return $('#JavaScript_OFF').css('display', 'none');
  });

}).call(this);
