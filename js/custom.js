// Generated by CoffeeScript 1.6.3
(function() {
  $(function() {
    var CClear, CReset, CTextReplace, CheckAllToggle, CustomTextPlus, DownloadShow, country_all, country_selector, custom_area, default_custom_text, registries_selector, registry_all;
    custom_area = $('#custom input[name="custom_string"]');
    default_custom_text = "<CC>: <IPSTART>-<IPEND>";
    CustomTextPlus = function(value) {
      var setting_text;
      setting_text = custom_area.val();
      setting_text += value;
      return custom_area.val(setting_text);
    };
    $('#custom .registry').click(function() {
      CustomTextPlus("<REGISTRY>");
      return CTextReplace.keyup();
    });
    $('#custom .button .country').click(function() {
      CustomTextPlus("<CC>");
      return CTextReplace.keyup();
    });
    $('#custom .button .ipstart').click(function() {
      CustomTextPlus("<IPSTART>");
      return CTextReplace.keyup();
    });
    $('#custom .button .ipend').click(function() {
      CustomTextPlus("<IPEND>");
      return CTextReplace.keyup();
    });
    CReset = $('#custom .reset').click(function() {
      custom_area.val(default_custom_text);
      return CTextReplace.keyup();
    });
    CClear = $('#custom .button .clear').click(function() {
      custom_area.val('');
      return $("#custom .result").text("");
    });
    DownloadShow = function() {
      var country_checks, download_url, list, num, output, registry_checks, str, value;
      value = custom_area.val();
      str = $.trim(value);
      registry_checks = (function() {
        var _i, _len, _ref, _results;
        _ref = $('#registry .element .rir:checked');
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          num = _ref[_i];
          _results.push(num.value);
        }
        return _results;
      })();
      country_checks = (function() {
        var _i, _len, _ref, _results;
        _ref = $('#country .element .cc:checked');
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          num = _ref[_i];
          _results.push(num.value);
        }
        return _results;
      })();
      if (registry_checks.length > 0 || country_checks.length > 0) {
        if (registry_checks.length > 0) {
          list = registry_checks.join(',');
          output = "?registry=" + list;
        } else {
          list = country_checks.join(',');
          output = "?country=" + list;
        }
        download_url = encodeURI(location.protocol + "//" + location.host + "/jsoncustom" + output + "&settings=" + str);
        return $("#custom .result_url").html('<a href="' + download_url + '">' + download_url + '</a>');
      } else {
        return $("#custom .result_url").text("取得したい対象が未指定");
      }
    };
    CTextReplace = custom_area.keyup(function() {
      var replace_str, str, value;
      value = custom_area.val();
      str = $.trim(value);
      replace_str = str.replace(/<REGISTRY>/g, "APNIC");
      replace_str = replace_str.replace(/<CC>/g, "JP");
      replace_str = replace_str.replace(/<IPSTART>/g, "192.168.0.0");
      replace_str = replace_str.replace(/<IPEND>/g, "192.168.0.255");
      $("#custom .result").text(replace_str);
      return DownloadShow();
    });
    $("#custom .download").click(function() {
      var country_checks, custom_text, custom_value, list, num, output, registry_checks;
      registry_checks = (function() {
        var _i, _len, _ref, _results;
        _ref = $('#registry .element .rir:checked');
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          num = _ref[_i];
          _results.push(num.value);
        }
        return _results;
      })();
      country_checks = (function() {
        var _i, _len, _ref, _results;
        _ref = $('#country .element .cc:checked');
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          num = _ref[_i];
          _results.push(num.value);
        }
        return _results;
      })();
      if (registry_checks.length > 0 && country_checks.length > 0) {
        return alert("レジストリ側、国名側の両方のチェックボックスに" + "チェックが入っています。\n" + "どちらか片方のチェックボックスをクリアして、" + "再度行ってください。");
      } else if (registry_checks.length === 0 && country_checks.length === 0) {
        return alert("レジストリ側、国名側の両方のチェックボックスに" + "チェックが入っていません。\n" + "どちらか片方の取得したいチェックボックスを選択して、" + "再度行ってください。");
      } else {
        custom_value = custom_area.val();
        custom_text = $.trim(custom_value);
        if (registry_checks.length > 0) {
          list = registry_checks.join(',');
          output = "?registry=" + list;
        } else {
          list = country_checks.join(',');
          output = "?country=" + list;
        }
        return location.href = encodeURI("/jsoncustom" + output + "&settings=" + custom_text);
      }
    });
    registry_all = $('#registry .all');
    country_all = $('#country .all');
    registries_selector = '#registry .element input';
    country_selector = '#country .element input';
    $('#registry .element .rir').click(function() {
      if (!this.checked) {
        return registry_all.prop({
          'checked': false
        });
      }
    });
    $('#country .element .cc').click(function() {
      if (!this.checked) {
        return country_all.prop({
          'checked': false
        });
      }
    });
    CheckAllToggle = function(selector, state) {
      if (state) {
        return $(selector).prop({
          'checked': true
        });
      } else {
        return $(selector).prop({
          'checked': false
        });
      }
    };
    registry_all.click(function() {
      CheckAllToggle(registries_selector, this.checked);
      return DownloadShow();
    });
    country_all.click(function() {
      CheckAllToggle(country_selector, this.checked);
      return DownloadShow();
    });
    $(registries_selector).click(function() {
      return DownloadShow();
    });
    $(country_selector).click(function() {
      return DownloadShow();
    });
    return CReset.click();
  });

}).call(this);
